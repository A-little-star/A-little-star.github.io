[{"title":"什么是Docker？怎样使用？一个解决复杂的环境配置问题的利器！","url":"/posts/20230905202108-d7767099.html","content":"\n# 如何使用Docker？\n\n## 一、Docker是什么？\n\n开发软件时，离不开各种各样的配置和环境，软件对于配置和环境的依赖是非常严重且重要的，又是运行环境稍微不同，代码就不见得能跑起来。如何解决令人头疼的版本、配置问题？\n\n答案是使用Docker。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案——系统平滑移植、容器虚拟化技术。\n\n配置环境相当麻烦，换一台机器，就要重来一次，费时费力，很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用Docker可以消除写作编码时“在我的机器上可以正常工作”的问题。\n\n一句话总结，Docker是一个解决了运行环境和配置为题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。\n\n## 二、Docker能用来做什么？\n\n“一次镜像，处处运行”。\n\nDocker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统虚拟机则是在硬件层面实现虚拟化。与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。\n\n### 容器和虚拟机的区别？\n\n虚拟机的缺点：资源占用多、冗余步骤多、启动慢。虚拟机会模拟整个操作系统。\n\nLinux容器（LXC）与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。\n\n- 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，在该系统上再运行所需的应用进程；\n- 容器内的应用进程直 接运行于宿主的内核，容器内没有自己的内核**且也没有进行硬件虚拟**。因此容器要比传统虚拟机更为轻便。\n- 每个容器之间相互隔离，每个容器  有自己的文件系统，容器之间进程不会相互影响。\n\n## 三、Docker怎么玩？\n\nDocker的三大要素：镜像、容器、仓库。\n\n### 镜像命令\n\n#### 1.查看本地下载的镜像\n\n```bash\ndocker images\n```\n\n#### 2.从远程拉取镜像\n\n```bash\ndocker pull 镜像名字\n```\n\n#### 3.查看镜像/容器/数据卷所占的空间\n\n```bash\ndocker system df\n```\n\n#### 4.删除镜像\n\n```bash\ndocker rmi 镜像名字/镜像ID\n```\n\n#### 5.启动交互式容器\n\n```bash\ndocker run -it 容器名\n```\n\n#### 6.查看当前容器（包括正在运行的和没有运行的）\n\n```bash\ndocker ps -a\n```\n\n#### 7.删除指定容器\n\n```bash\ndocker rm 容器ID\n参数：\n-f 强制删除\n```\n\n#### 8.退出当前交互式容器\n\n```bash\nexit    # 会退出容器\n或\nctrl+p+q  # 不会退出容器\n```\n\n#### 9.重新接入up状态的容器\n\n```bash\ndocker exec -it 容器ID   # 会启用一个新的进程，因此exit不会退出容器\ndocker attach 容器ID   # 接入推出之前的进程，不会启用新的进程，因此exit会退出容器\n```\n\n#### 10.启动守护式容器\n\n```bash\ndocker run -d 容器名\n```\n\n#### 11.将容器中的文件拷贝至本地\n\n```bash\ndocker cp 容器ID:<src dir> <direct dir>\n```\n\n#### 12.容器的导入导出（用于备份整个容器）\n\n```bash\ndocker export 容器ID > xxx.tar # 将容器导出为.tar文件包\ncat xxx.tar | docker import - 镜像用户/镜像名：镜像版本号\n```\n\n#### 13.将本地的容器提交为镜像\n\n```bash\ndocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器ID 要创建的目标镜像名:[标签名]\n```\n\n\n\n### Docker镜像\n\n#### 是什么\n\n采用UnionFS（联合文件系统）层层叠加。所有镜像都有一个父镜像生成，父镜像只包含一些较为底层的内容，子镜像会继承父镜像的内容，并且拓展一些新的内容，所有的镜像就是这样产生的。\n\n镜像分层的最的好处是共享资源，方便复制迁移，就是为了复用。\n\n#### docker commit\n\n```bash\ndocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器ID 要创建的目标镜像名:[标签名]\n```\n\n"},{"title":"如何利用hexo+github为自己搭建一个个人主页（个人博客）","url":"/posts/20230828120822-951d53be.html","content":"\n一般情况下，为自己搭建一个个人主页，需要服务器部署、域名解析、网页开发等工作，这些工作非常的繁琐且复杂，非常不适合小白或者没有太多时间的学生党。\n\n但是利用Hexo+GitHub，就可以轻松解决以上的问题。\n\nHexo是一个基于Node.js的静态博客生成框架，它允许用户以简介的方式创建、管理和发布博客内容，Hexo的设计初衷是为了让用户能够更轻松地搭建个人博客，无需复杂的数据库或服务器设置，只需生成一组静态HTML文件，然后将其部署到一个静态文件托管服务上，如GitHub pages、Netlify等。\n\n而GitHub Pages能够为我们提供一个免费的静态文件托管平台，创建的github.io非常适合用于个人博客、项目文档、作品展示等内容。\n\n\n\n## 操作方法\n\n### 一、配置环境\n\n本文使用的操作系统为Win10下的Ubuntu22.04 WSL发行版，实际上是一个Linux系统，至于windows系统，操作方法类似。\n\n#### 1. 安装Node.js。\n\n这里建议大家不要使用Ubuntu自带的apt下载nodejs，因为版本不一定是最新的，建议直接去Nodejs官网去下载比较新的版本。一般情况下nodejs会附带配套的npm（Node Package Manager，是一个用于Node.js环境的包管理工具），如果没有的话可以单独安装一下npm。\n\n这里给大家推荐一个Ubuntu下的nodejs安装教程 https://blog.csdn.net/w20101310/article/details/73135388\n\nwindows系统下的小伙伴可以自行STFW（Search the f**king Web）。\n\n**本文使用的Node.js版本为v18.13.0，npm版本为8.19.3**\n\n#### 2. 安装Git。\n\n相信程序员伙伴们都认识这个工具，它实际上是一个非常强大的版本控制软件。\n\n对于还没有使用过git的小伙伴，在Ubuntu下直接apt安装即可（运行以下命令）：\n\n```bash\nsudo apt install git\n```\n\nwindows系统可以自行STFW，git的安装相对简单。\n\n#### 3. 安装hexo。\n\n在命令行中执行：\n\n```bash\nnpm install hexo-cli -g\n```\n\n等待自动安装完成后，输入：\n\n```bash\nhexo -v\n```\n\n检查是否安装成功，若安装成功，应该显示hexo的版本号。\n\n**本文使用的hexo版本为hexo-cli: 4.3.1**\n\n#### 4. 在github上创建github.io远程仓库。\n\n在github中新建一个仓库，Repository name设置为<username>.github.io，比如我的github用户名是A-little-star，那么创建的仓库名称应为A-little-star.github.io，注意这里必须使用自己的用户名，否则会出错。\n\n### 二、创建Hexo项目，能够在本地运行\n\n#### 1. 初始化Hexo\n\n创建一个文件夹用于存放Hexo项目。比如创建一个名为mypage的目录。\n\n进入mypage目录，运行：\n\n```bash\nhexo init blog\n```\n\n以上命令会在mypage目录下创建一个新的目录blog，并在blog目录下对hexo项目进行初始化。\n\n接着进入blog目录，运行：\n\n```bash\ncd blog\nnpm install\n```\n\n然后利用hexo工具生成网页：\n\n```bash\nhexo g\n```\n\n完成之后就已经成功在本地创建了一个网页，想查看的话，输入：\n\n```bash\nhexo server  # 可以简写为hexo s\n```\n\n这条命令会在本地开启一个服务器，提示你可以通过给定的URL访问网页，如下图所示：\n\n![1693197974225](/img/blog/1693197974225.png)\n\n默认的网址为http://localhost:4000/。\n\n看到这样的画面，证明配置成功：\n\n ![img](../img/blog/b26252eb40bc11f27ab2808484f82dd0.png) \n\n#### 2. 安装主题\n\nHexo的主题管理非常的方便易用，更换主题可以采用如下方式：\n\n在浏览器中搜索hexo theme，进入官网的主题页面，里面有300+种主题，你可以选择一种自己喜欢的主题。\n\n这里我使用的主题是Aircloud。\n\n然后进入到该主题的github仓库，将代码clone到hexo项目的themes目录下：\n\n```bash\ngit clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud\n```\n\n完成之后，进入到themes文件夹，可以看到里面多了一个aircloud。\n\n![1693198425618](../img/blog/1693198425618.png)\n\n然后进入到项目根目录，修改其中的_config.yml文件，将以theme: 开头的行改为theme: aircloud\n\n![1693198510376](../img/blog/1693198510376.png)\n\n然后再运行hexo s进行本地测试。\n\n会发现主题发生了变化。\n\n#### 3.修改博客内容\n\n博客上显示的基本信息基本上都在_config.yml文件中设置，只需要在 _config.yml 文件中修改对应的信息，既可以在网站上呈现出不同的信息，对于具体的主题，每个主题的github仓库的README.md文件中都会给出比较详细的配置方式。\n\n最后，**很关键的一步！！！**\n\n在_config.yml中的Deployment部分中，将远程仓库地址添加上去：\n\n![1693198897239](/img/blog/1693198897239.png)\n\n### 三、将本地项目部署到远程仓库\n\n#### 1. 安装部署工具\n\n继续在本地的项目根目录安装部署工具：\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n**注意：**只有以上命令执行成功才能将主页部署到github.io上去！\n\n#### 2. 初始化本地仓库：\n\n```bash\ngit init\n```\n\n#### 3. 连接远程仓库\n\n```bash\ngit remote add origin git@github.com:A-little-star/A-little-star.github.io.git\n```\n\n#### 4. 发布hexo到github page\n\n```\nhexo clean && hexo g && hexo d\n```\n\nhexo clean将删除旧的静态文件及其他缓存文件；\n\nhexo g 命令实际上是hexo generate的简写，根据源文件生成静态HTML文件；\n\nhexo d 命令实际上是hexo deploy的简写，它将把生成的静态文件部署到github上去。\n\n执行完以上命令后，打开github，你会发现你的github.io仓库中多了一些文件，这就是hexo d命令部署上去的。\n\n#### 5. 将本地源代码推送至远程\n\n由于github.io仓库中已经存放了部署的静态网页，所以我们新建一个分支src，将源码放在这个分支下面，用于后续开发：\n\n```bash\ngit add .\ngit commit -m 'First commit.'\ngit checkout -b src\ngit push -u origin src\n```\n\n接下来打开网站就可以看到效果了。\n\n#### 6. 之后修改\n\n之后每次修改后，都可以用hexo clean && hexo g来生成网页，在本地通过hexo s调试之后，hexo d部署到远程，然后将源码push到远程仓库即可。","tags":["教程"]}]