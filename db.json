{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":0},{"_id":"source/img/blog/1693197974225.png","path":"img/blog/1693197974225.png","modified":0,"renderable":0},{"_id":"source/img/blog/1693198425618.png","path":"img/blog/1693198425618.png","modified":0,"renderable":0},{"_id":"source/img/blog/1693198510376.png","path":"img/blog/1693198510376.png","modified":0,"renderable":0},{"_id":"source/img/blog/1693198897239.png","path":"img/blog/1693198897239.png","modified":0,"renderable":0},{"_id":"source/img/blog/b26252eb40bc11f27ab2808484f82dd0.png","path":"img/blog/b26252eb40bc11f27ab2808484f82dd0.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/如何利用hexo-github为自己搭建一个个人主页（个人博客）.md","hash":"96cb8e1708a8bbd58601f9b94efb1bf09a79ce5e","modified":1693201080234},{"_id":"source/about/index.md","hash":"80c6c3bd7fe335e81bc81fb6b1cfdbff85cf088f","modified":1693186980584},{"_id":"source/collect/index.md","hash":"7c0a0c54abc945030358142a3b0c9baffb041ffd","modified":1693195272204},{"_id":"source/img/head.jpg","hash":"0074677934be1a51fe5f88f9cd62aa8ed49f82d9","modified":1693184945064},{"_id":"source/tags/index.md","hash":"22dd3308e0a3db852e008fa8c8d526142e790dcb","modified":1693186949664},{"_id":"source/img/blog/1693197974225.png","hash":"d5888551172f6047308be2a22d69b62efa755587","modified":1693200252684},{"_id":"source/img/blog/1693198425618.png","hash":"97a5675014679257ae986b59df06874818cffedd","modified":1693200376844},{"_id":"source/img/blog/1693198510376.png","hash":"fc3466a30deb21ce2f39f154280a1c42d2764264","modified":1693200405994},{"_id":"source/img/blog/1693198897239.png","hash":"ad703b3bc0de0a4fe55171242c7ebcc18fd49735","modified":1693200443754},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693151164322},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693151164322},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693151164322},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693151164322},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693151164322},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1693151164322},{"_id":"themes/aircloud/_config.yml","hash":"0ad3a6ab2c9bb07fb1e030052622fdcde5c6f28a","modified":1693151164322},{"_id":"themes/aircloud/readme-en.md","hash":"26ea5c998b0c1f1947fbae5313b722bcf57ea7fe","modified":1693151164322},{"_id":"themes/aircloud/readme.md","hash":"149fce55a0f51e01596d0b63b438190fff132346","modified":1693151164322},{"_id":"themes/aircloud/languages/en.yml","hash":"7c91738afbd01239098aec8e09c7e27f014b64de","modified":1693151164322},{"_id":"themes/aircloud/languages/ko.yml","hash":"d729b314c03294b4ce2116a697b289955a429483","modified":1693151164322},{"_id":"themes/aircloud/languages/zh.yml","hash":"110c91155a704a6fc61fbd12253fdfef2a514444","modified":1693151164322},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1693151164322},{"_id":"themes/aircloud/layout/about.ejs","hash":"75d459dea8a2216105727638e97862fa4ef08d38","modified":1693151164322},{"_id":"themes/aircloud/layout/archive.ejs","hash":"0f8a062f4f2f0648b23bd8c4a21945a6ca60dc1f","modified":1693151164322},{"_id":"themes/aircloud/layout/collect.ejs","hash":"bb5b31ba1c7389b0920d5dc5257fa19b67024106","modified":1693151164322},{"_id":"themes/aircloud/layout/index.ejs","hash":"e5243033bc75f30e954010581025d3cb62fbaff0","modified":1693151164322},{"_id":"themes/aircloud/layout/layout.ejs","hash":"96d72550e22ecaa72905e0df65f3b7f35f57b5a5","modified":1693151164322},{"_id":"themes/aircloud/layout/post.ejs","hash":"cbdb70171d855e57b302c2a282009515d922b5c6","modified":1693151164322},{"_id":"themes/aircloud/layout/tags.ejs","hash":"72c01211afcb8f9e53500dc8c6ea23bc96fe1b96","modified":1693151164322},{"_id":"themes/aircloud/layout/page.ejs","hash":"75d459dea8a2216105727638e97862fa4ef08d38","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/analytics.ejs","hash":"7108768a4c16df7f5c73a2a85a05c1defe6590a8","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"33db88f1b03548c5181c04d44387dc68a9c4cdf6","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"b3ecc34d59996891ec6446c225c1b5f4ccc0d2b9","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"fcf6e6fb11e43c6a829359c18b41f160f8980a6d","modified":1693151164322},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1693151164322},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1693151164322},{"_id":"themes/aircloud/source/_less/common.less","hash":"0c1e4c32a50eac8602f97a1110adc409059b2b40","modified":1693151164322},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1693151164322},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"cb4cad2f034bd369a858349cec2da3df6ba08e6a","modified":1693151164322},{"_id":"themes/aircloud/source/_less/index.less","hash":"9363ed3f24e82b6b772e1a30a6aef86845821819","modified":1693151164322},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1693151164322},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1693151164322},{"_id":"themes/aircloud/source/_less/post.less","hash":"64b85a733a38e23cd5d246edd4c4c30c4379a826","modified":1693151164322},{"_id":"themes/aircloud/source/_less/tag.less","hash":"a4c11708a60f5f550a8bc62babeb851048bbbf5d","modified":1693151164322},{"_id":"themes/aircloud/source/_less/toc.less","hash":"d3df8520da83c06414c75f31fd2bd333a7517c1f","modified":1693151164322},{"_id":"themes/aircloud/source/_less/nav.less","hash":"534a6e48b3972fbac20027c1823eb89ecb2d893d","modified":1693151164322},{"_id":"themes/aircloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1693151164322},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1693151164322},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"5a78ae97d259f271fcdee707dc7753adb6b48ac9","modified":1693151164322},{"_id":"themes/aircloud/source/js/index.js","hash":"35cb5c8db6452386503171bd8bd80a5298f943ce","modified":1693151164322},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e00d722211b4695449d72850340ac0dd701d6ede","modified":1693151164322},{"_id":"themes/aircloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1693151164322},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"d1469f97daf750f3e4be18c4d640772780c32a75","modified":1693151164322},{"_id":"themes/aircloud/source/_less/variables.less","hash":"0f0fcb50e821d4c102307d613a40314eeee6f7ef","modified":1693151164322},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"d84ebc41c0e6f40af20de3ddec19d5418672233f","modified":1693151164322},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1693151164322},{"_id":"source/img/blog/b26252eb40bc11f27ab2808484f82dd0.png","hash":"1a407c149fff62447aa463714d8a2402dc8c0495","modified":1693200328854},{"_id":"public/search.json","hash":"ad5f9099f68492f3cbb119a87664735f4d6dee89","modified":1693201165794},{"_id":"public/about/index.html","hash":"d8507c6e029cb9569b235e4f91a24e113a598227","modified":1693201165794},{"_id":"public/collect/index.html","hash":"5cdb588e5ae0483f1ee2fbc46f93069f47620307","modified":1693201165794},{"_id":"public/tags/index.html","hash":"cb1968ec781ef6c3749c5a984db62442df855c09","modified":1693201165794},{"_id":"public/archives/index.html","hash":"f4cda8fc5398b8b934b1674a15307fc36eb61aca","modified":1693201165794},{"_id":"public/archives/2023/index.html","hash":"f4cda8fc5398b8b934b1674a15307fc36eb61aca","modified":1693201165794},{"_id":"public/archives/2023/08/index.html","hash":"f4cda8fc5398b8b934b1674a15307fc36eb61aca","modified":1693201165794},{"_id":"public/index.html","hash":"e6c49e19bde3d56fdf8bc29b62277ef4c9556270","modified":1693201165794},{"_id":"public/tags/教程/index.html","hash":"f34fe152bf3e9ca1226ef05bcfb20abc964fb4b4","modified":1693201165794},{"_id":"public/2023/08/28/cllug99bp0003tbtn2q6scon8/index.html","hash":"4301f3636b79215cdeed413f5af16a74e38b1585","modified":1693201165794},{"_id":"public/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1693201165794},{"_id":"public/css/aircloud.less","hash":"5a78ae97d259f271fcdee707dc7753adb6b48ac9","modified":1693201165794},{"_id":"public/img/head.jpg","hash":"0074677934be1a51fe5f88f9cd62aa8ed49f82d9","modified":1693201165794},{"_id":"public/img/blog/1693197974225.png","hash":"d5888551172f6047308be2a22d69b62efa755587","modified":1693201165794},{"_id":"public/img/blog/1693198425618.png","hash":"97a5675014679257ae986b59df06874818cffedd","modified":1693201165794},{"_id":"public/img/blog/1693198510376.png","hash":"fc3466a30deb21ce2f39f154280a1c42d2764264","modified":1693201165794},{"_id":"public/img/blog/1693198897239.png","hash":"ad703b3bc0de0a4fe55171242c7ebcc18fd49735","modified":1693201165794},{"_id":"public/js/index.js","hash":"35cb5c8db6452386503171bd8bd80a5298f943ce","modified":1693201165794},{"_id":"public/css/aircloud.css","hash":"d84ebc41c0e6f40af20de3ddec19d5418672233f","modified":1693201165794},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1693201165794},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1693201165794},{"_id":"public/img/blog/b26252eb40bc11f27ab2808484f82dd0.png","hash":"1a407c149fff62447aa463714d8a2402dc8c0495","modified":1693201165794}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","comments":1,"_content":"","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---","updated":"2023-08-28T01:43:00.584Z","path":"about/index.html","_id":"cllug99bk0000tbtneyx8adn4","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"collect","titile":"我的收藏","comments":0,"_content":"","source":"collect/index.md","raw":"---\nlayout: \"collect\"\ntitile: \"我的收藏\"\ncomments: false\n---","date":"2023-08-28T04:01:12.204Z","updated":"2023-08-28T04:01:12.204Z","path":"collect/index.html","title":"","_id":"cllug99bn0001tbtn9j3s5glj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---","date":"2023-08-28T01:42:29.664Z","updated":"2023-08-28T01:42:29.664Z","path":"tags/index.html","comments":1,"_id":"cllug99bo0002tbtn9f8j279e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"如何利用hexo+github为自己搭建一个个人主页（个人博客）","date":"2023-08-28T04:08:22.000Z","_content":"\n一般情况下，为自己搭建一个个人主页，需要服务器部署、域名解析、网页开发等工作，这些工作非常的繁琐且复杂，非常不适合小白或者没有太多时间的学生党。\n\n但是利用Hexo+GitHub，就可以轻松解决以上的问题。\n\nHexo是一个基于Node.js的静态博客生成框架，它允许用户以简介的方式创建、管理和发布博客内容，Hexo的设计初衷是为了让用户能够更轻松地搭建个人博客，无需复杂的数据库或服务器设置，只需生成一组静态HTML文件，然后将其部署到一个静态文件托管服务上，如GitHub pages、Netlify等。\n\n而GitHub Pages能够为我们提供一个免费的静态文件托管平台，创建的github.io非常适合用于个人博客、项目文档、作品展示等内容。\n\n\n\n## 操作方法\n\n### 一、配置环境\n\n本文使用的操作系统为Win10下的Ubuntu22.04 WSL发行版，实际上是一个Linux系统，至于windows系统，操作方法类似。\n\n#### 1. 安装Node.js。\n\n这里建议大家不要使用Ubuntu自带的apt下载nodejs，因为版本不一定是最新的，建议直接去Nodejs官网去下载比较新的版本。一般情况下nodejs会附带配套的npm（Node Package Manager，是一个用于Node.js环境的包管理工具），如果没有的话可以单独安装一下npm。\n\n这里给大家推荐一个Ubuntu下的nodejs安装教程 https://blog.csdn.net/w20101310/article/details/73135388\n\nwindows系统下的小伙伴可以自行STFW（Search the f**king Web）。\n\n**本文使用的Node.js版本为v18.13.0，npm版本为8.19.3**\n\n#### 2. 安装Git。\n\n相信程序员伙伴们都认识这个工具，它实际上是一个非常强大的版本控制软件。\n\n对于还没有使用过git的小伙伴，在Ubuntu下直接apt安装即可（运行以下命令）：\n\n```bash\nsudo apt install git\n```\n\nwindows系统可以自行STFW，git的安装相对简单。\n\n#### 3. 安装hexo。\n\n在命令行中执行：\n\n```bash\nnpm install hexo-cli -g\n```\n\n等待自动安装完成后，输入：\n\n```bash\nhexo -v\n```\n\n检查是否安装成功，若安装成功，应该显示hexo的版本号。\n\n**本文使用的hexo版本为hexo-cli: 4.3.1**\n\n#### 4. 在github上创建github.io远程仓库。\n\n在github中新建一个仓库，Repository name设置为<username>.github.io，比如我的github用户名是A-little-star，那么创建的仓库名称应为A-little-star.github.io，注意这里必须使用自己的用户名，否则会出错。\n\n### 二、创建Hexo项目，能够在本地运行\n\n#### 1. 初始化Hexo\n\n创建一个文件夹用于存放Hexo项目。比如创建一个名为mypage的目录。\n\n进入mypage目录，运行：\n\n```bash\nhexo init blog\n```\n\n以上命令会在mypage目录下创建一个新的目录blog，并在blog目录下对hexo项目进行初始化。\n\n接着进入blog目录，运行：\n\n```bash\ncd blog\nnpm install\n```\n\n然后利用hexo工具生成网页：\n\n```bash\nhexo g\n```\n\n完成之后就已经成功在本地创建了一个网页，想查看的话，输入：\n\n```bash\nhexo server  # 可以简写为hexo s\n```\n\n这条命令会在本地开启一个服务器，提示你可以通过给定的URL访问网页，如下图所示：\n\n![1693197974225](/img/blog/1693197974225)\n\n默认的网址为http://localhost:4000/。\n\n看到这样的画面，证明配置成功：\n\n ![img](../img/blog/b26252eb40bc11f27ab2808484f82dd0.png) \n\n#### 2. 安装主题\n\nHexo的主题管理非常的方便易用，更换主题可以采用如下方式：\n\n在浏览器中搜索hexo theme，进入官网的主题页面，里面有300+种主题，你可以选择一种自己喜欢的主题。\n\n这里我使用的主题是Aircloud。\n\n然后进入到该主题的github仓库，将代码clone到hexo项目的themes目录下：\n\n```bash\ngit clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud\n```\n\n完成之后，进入到themes文件夹，可以看到里面多了一个aircloud。\n\n![1693198425618](../img/blog/1693198425618.png)\n\n然后进入到项目根目录，修改其中的_config.yml文件，将以theme: 开头的行改为theme: aircloud\n\n![1693198510376](../img/blog/1693198510376.png)\n\n然后再运行hexo s进行本地测试。\n\n会发现主题发生了变化。\n\n#### 3.修改博客内容\n\n博客上显示的基本信息基本上都在_config.yml文件中设置，只需要在 _config.yml 文件中修改对应的信息，既可以在网站上呈现出不同的信息，对于具体的主题，每个主题的github仓库的README.md文件中都会给出比较详细的配置方式。\n\n最后，**很关键的一步！！！**\n\n在_config.yml中的Deployment部分中，将远程仓库地址添加上去：\n\n![1693198897239](/img/blog/1693198897239.png)\n\n### 三、将本地项目部署到远程仓库\n\n#### 1. 安装部署工具\n\n继续在本地的项目根目录安装部署工具：\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n**注意：**只有以上命令执行成功才能将主页部署到github.io上去！\n\n#### 2. 初始化本地仓库：\n\n```bash\ngit init\n```\n\n#### 3. 连接远程仓库\n\n```bash\ngit remote add origin git@github.com:A-little-star/A-little-star.github.io.git\n```\n\n#### 4. 发布hexo到github page\n\n```\nhexo clean && hexo g && hexo d\n```\n\nhexo clean将删除旧的静态文件及其他缓存文件；\n\nhexo g 命令实际上是hexo generate的简写，根据源文件生成静态HTML文件；\n\nhexo d 命令实际上是hexo deploy的简写，它将把生成的静态文件部署到github上去。\n\n执行完以上命令后，打开github，你会发现你的github.io仓库中多了一些文件，这就是hexo d命令部署上去的。\n\n#### 5. 将本地源代码推送至远程\n\n由于github.io仓库中已经存放了部署的静态网页，所以我们新建一个分支src，将源码放在这个分支下面，用于后续开发：\n\n```bash\ngit add .\ngit commit -m 'First commit.'\ngit checkout -b src\ngit push -u origin src\n```\n\n接下来打开网站就可以看到效果了。\n\n#### 6. 之后修改\n\n之后每次修改后，都可以用hexo clean && hexo g来生成网页，在本地通过hexo s调试之后，hexo d部署到远程，然后将源码push到远程仓库即可。","source":"_posts/如何利用hexo-github为自己搭建一个个人主页（个人博客）.md","raw":"---\ntitle: 如何利用hexo+github为自己搭建一个个人主页（个人博客）\ndate: 2023-08-28 12:08:22\ntags: 教程\n---\n\n一般情况下，为自己搭建一个个人主页，需要服务器部署、域名解析、网页开发等工作，这些工作非常的繁琐且复杂，非常不适合小白或者没有太多时间的学生党。\n\n但是利用Hexo+GitHub，就可以轻松解决以上的问题。\n\nHexo是一个基于Node.js的静态博客生成框架，它允许用户以简介的方式创建、管理和发布博客内容，Hexo的设计初衷是为了让用户能够更轻松地搭建个人博客，无需复杂的数据库或服务器设置，只需生成一组静态HTML文件，然后将其部署到一个静态文件托管服务上，如GitHub pages、Netlify等。\n\n而GitHub Pages能够为我们提供一个免费的静态文件托管平台，创建的github.io非常适合用于个人博客、项目文档、作品展示等内容。\n\n\n\n## 操作方法\n\n### 一、配置环境\n\n本文使用的操作系统为Win10下的Ubuntu22.04 WSL发行版，实际上是一个Linux系统，至于windows系统，操作方法类似。\n\n#### 1. 安装Node.js。\n\n这里建议大家不要使用Ubuntu自带的apt下载nodejs，因为版本不一定是最新的，建议直接去Nodejs官网去下载比较新的版本。一般情况下nodejs会附带配套的npm（Node Package Manager，是一个用于Node.js环境的包管理工具），如果没有的话可以单独安装一下npm。\n\n这里给大家推荐一个Ubuntu下的nodejs安装教程 https://blog.csdn.net/w20101310/article/details/73135388\n\nwindows系统下的小伙伴可以自行STFW（Search the f**king Web）。\n\n**本文使用的Node.js版本为v18.13.0，npm版本为8.19.3**\n\n#### 2. 安装Git。\n\n相信程序员伙伴们都认识这个工具，它实际上是一个非常强大的版本控制软件。\n\n对于还没有使用过git的小伙伴，在Ubuntu下直接apt安装即可（运行以下命令）：\n\n```bash\nsudo apt install git\n```\n\nwindows系统可以自行STFW，git的安装相对简单。\n\n#### 3. 安装hexo。\n\n在命令行中执行：\n\n```bash\nnpm install hexo-cli -g\n```\n\n等待自动安装完成后，输入：\n\n```bash\nhexo -v\n```\n\n检查是否安装成功，若安装成功，应该显示hexo的版本号。\n\n**本文使用的hexo版本为hexo-cli: 4.3.1**\n\n#### 4. 在github上创建github.io远程仓库。\n\n在github中新建一个仓库，Repository name设置为<username>.github.io，比如我的github用户名是A-little-star，那么创建的仓库名称应为A-little-star.github.io，注意这里必须使用自己的用户名，否则会出错。\n\n### 二、创建Hexo项目，能够在本地运行\n\n#### 1. 初始化Hexo\n\n创建一个文件夹用于存放Hexo项目。比如创建一个名为mypage的目录。\n\n进入mypage目录，运行：\n\n```bash\nhexo init blog\n```\n\n以上命令会在mypage目录下创建一个新的目录blog，并在blog目录下对hexo项目进行初始化。\n\n接着进入blog目录，运行：\n\n```bash\ncd blog\nnpm install\n```\n\n然后利用hexo工具生成网页：\n\n```bash\nhexo g\n```\n\n完成之后就已经成功在本地创建了一个网页，想查看的话，输入：\n\n```bash\nhexo server  # 可以简写为hexo s\n```\n\n这条命令会在本地开启一个服务器，提示你可以通过给定的URL访问网页，如下图所示：\n\n![1693197974225](/img/blog/1693197974225)\n\n默认的网址为http://localhost:4000/。\n\n看到这样的画面，证明配置成功：\n\n ![img](../img/blog/b26252eb40bc11f27ab2808484f82dd0.png) \n\n#### 2. 安装主题\n\nHexo的主题管理非常的方便易用，更换主题可以采用如下方式：\n\n在浏览器中搜索hexo theme，进入官网的主题页面，里面有300+种主题，你可以选择一种自己喜欢的主题。\n\n这里我使用的主题是Aircloud。\n\n然后进入到该主题的github仓库，将代码clone到hexo项目的themes目录下：\n\n```bash\ngit clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud\n```\n\n完成之后，进入到themes文件夹，可以看到里面多了一个aircloud。\n\n![1693198425618](../img/blog/1693198425618.png)\n\n然后进入到项目根目录，修改其中的_config.yml文件，将以theme: 开头的行改为theme: aircloud\n\n![1693198510376](../img/blog/1693198510376.png)\n\n然后再运行hexo s进行本地测试。\n\n会发现主题发生了变化。\n\n#### 3.修改博客内容\n\n博客上显示的基本信息基本上都在_config.yml文件中设置，只需要在 _config.yml 文件中修改对应的信息，既可以在网站上呈现出不同的信息，对于具体的主题，每个主题的github仓库的README.md文件中都会给出比较详细的配置方式。\n\n最后，**很关键的一步！！！**\n\n在_config.yml中的Deployment部分中，将远程仓库地址添加上去：\n\n![1693198897239](/img/blog/1693198897239.png)\n\n### 三、将本地项目部署到远程仓库\n\n#### 1. 安装部署工具\n\n继续在本地的项目根目录安装部署工具：\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n**注意：**只有以上命令执行成功才能将主页部署到github.io上去！\n\n#### 2. 初始化本地仓库：\n\n```bash\ngit init\n```\n\n#### 3. 连接远程仓库\n\n```bash\ngit remote add origin git@github.com:A-little-star/A-little-star.github.io.git\n```\n\n#### 4. 发布hexo到github page\n\n```\nhexo clean && hexo g && hexo d\n```\n\nhexo clean将删除旧的静态文件及其他缓存文件；\n\nhexo g 命令实际上是hexo generate的简写，根据源文件生成静态HTML文件；\n\nhexo d 命令实际上是hexo deploy的简写，它将把生成的静态文件部署到github上去。\n\n执行完以上命令后，打开github，你会发现你的github.io仓库中多了一些文件，这就是hexo d命令部署上去的。\n\n#### 5. 将本地源代码推送至远程\n\n由于github.io仓库中已经存放了部署的静态网页，所以我们新建一个分支src，将源码放在这个分支下面，用于后续开发：\n\n```bash\ngit add .\ngit commit -m 'First commit.'\ngit checkout -b src\ngit push -u origin src\n```\n\n接下来打开网站就可以看到效果了。\n\n#### 6. 之后修改\n\n之后每次修改后，都可以用hexo clean && hexo g来生成网页，在本地通过hexo s调试之后，hexo d部署到远程，然后将源码push到远程仓库即可。","slug":"如何利用hexo-github为自己搭建一个个人主页（个人博客）","published":1,"updated":"2023-08-28T05:38:00.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllug99bp0003tbtn2q6scon8","content":"<p>一般情况下，为自己搭建一个个人主页，需要服务器部署、域名解析、网页开发等工作，这些工作非常的繁琐且复杂，非常不适合小白或者没有太多时间的学生党。</p>\n<p>但是利用Hexo+GitHub，就可以轻松解决以上的问题。</p>\n<p>Hexo是一个基于Node.js的静态博客生成框架，它允许用户以简介的方式创建、管理和发布博客内容，Hexo的设计初衷是为了让用户能够更轻松地搭建个人博客，无需复杂的数据库或服务器设置，只需生成一组静态HTML文件，然后将其部署到一个静态文件托管服务上，如GitHub pages、Netlify等。</p>\n<p>而GitHub Pages能够为我们提供一个免费的静态文件托管平台，创建的github.io非常适合用于个人博客、项目文档、作品展示等内容。</p>\n<h2 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h2><h3 id=\"一、配置环境\"><a href=\"#一、配置环境\" class=\"headerlink\" title=\"一、配置环境\"></a>一、配置环境</h3><p>本文使用的操作系统为Win10下的Ubuntu22.04 WSL发行版，实际上是一个Linux系统，至于windows系统，操作方法类似。</p>\n<h4 id=\"1-安装Node-js。\"><a href=\"#1-安装Node-js。\" class=\"headerlink\" title=\"1. 安装Node.js。\"></a>1. 安装Node.js。</h4><p>这里建议大家不要使用Ubuntu自带的apt下载nodejs，因为版本不一定是最新的，建议直接去Nodejs官网去下载比较新的版本。一般情况下nodejs会附带配套的npm（Node Package Manager，是一个用于Node.js环境的包管理工具），如果没有的话可以单独安装一下npm。</p>\n<p>这里给大家推荐一个Ubuntu下的nodejs安装教程 <a href=\"https://blog.csdn.net/w20101310/article/details/73135388\">https://blog.csdn.net/w20101310/article/details/73135388</a></p>\n<p>windows系统下的小伙伴可以自行STFW（Search the f**king Web）。</p>\n<p><strong>本文使用的Node.js版本为v18.13.0，npm版本为8.19.3</strong></p>\n<h4 id=\"2-安装Git。\"><a href=\"#2-安装Git。\" class=\"headerlink\" title=\"2. 安装Git。\"></a>2. 安装Git。</h4><p>相信程序员伙伴们都认识这个工具，它实际上是一个非常强大的版本控制软件。</p>\n<p>对于还没有使用过git的小伙伴，在Ubuntu下直接apt安装即可（运行以下命令）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git</span><br></pre></td></tr></table></figure>\n\n<p>windows系统可以自行STFW，git的安装相对简单。</p>\n<h4 id=\"3-安装hexo。\"><a href=\"#3-安装hexo。\" class=\"headerlink\" title=\"3. 安装hexo。\"></a>3. 安装hexo。</h4><p>在命令行中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>等待自动安装完成后，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p>检查是否安装成功，若安装成功，应该显示hexo的版本号。</p>\n<p><strong>本文使用的hexo版本为hexo-cli: 4.3.1</strong></p>\n<h4 id=\"4-在github上创建github-io远程仓库。\"><a href=\"#4-在github上创建github-io远程仓库。\" class=\"headerlink\" title=\"4. 在github上创建github.io远程仓库。\"></a>4. 在github上创建github.io远程仓库。</h4><p>在github中新建一个仓库，Repository name设置为<username>.github.io，比如我的github用户名是A-little-star，那么创建的仓库名称应为A-little-star.github.io，注意这里必须使用自己的用户名，否则会出错。</p>\n<h3 id=\"二、创建Hexo项目，能够在本地运行\"><a href=\"#二、创建Hexo项目，能够在本地运行\" class=\"headerlink\" title=\"二、创建Hexo项目，能够在本地运行\"></a>二、创建Hexo项目，能够在本地运行</h3><h4 id=\"1-初始化Hexo\"><a href=\"#1-初始化Hexo\" class=\"headerlink\" title=\"1. 初始化Hexo\"></a>1. 初始化Hexo</h4><p>创建一个文件夹用于存放Hexo项目。比如创建一个名为mypage的目录。</p>\n<p>进入mypage目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会在mypage目录下创建一个新的目录blog，并在blog目录下对hexo项目进行初始化。</p>\n<p>接着进入blog目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>然后利用hexo工具生成网页：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>完成之后就已经成功在本地创建了一个网页，想查看的话，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server  <span class=\"comment\"># 可以简写为hexo s</span></span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在本地开启一个服务器，提示你可以通过给定的URL访问网页，如下图所示：</p>\n<p><img src=\"/img/blog/1693197974225\" alt=\"1693197974225\"></p>\n<p>默认的网址为<a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p>看到这样的画面，证明配置成功：</p>\n<p> <img src=\"/../img/blog/b26252eb40bc11f27ab2808484f82dd0.png\" alt=\"img\"> </p>\n<h4 id=\"2-安装主题\"><a href=\"#2-安装主题\" class=\"headerlink\" title=\"2. 安装主题\"></a>2. 安装主题</h4><p>Hexo的主题管理非常的方便易用，更换主题可以采用如下方式：</p>\n<p>在浏览器中搜索hexo theme，进入官网的主题页面，里面有300+种主题，你可以选择一种自己喜欢的主题。</p>\n<p>这里我使用的主题是Aircloud。</p>\n<p>然后进入到该主题的github仓库，将代码clone到hexo项目的themes目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud</span><br></pre></td></tr></table></figure>\n\n<p>完成之后，进入到themes文件夹，可以看到里面多了一个aircloud。</p>\n<p><img src=\"/../img/blog/1693198425618.png\" alt=\"1693198425618\"></p>\n<p>然后进入到项目根目录，修改其中的_config.yml文件，将以theme: 开头的行改为theme: aircloud</p>\n<p><img src=\"/../img/blog/1693198510376.png\" alt=\"1693198510376\"></p>\n<p>然后再运行hexo s进行本地测试。</p>\n<p>会发现主题发生了变化。</p>\n<h4 id=\"3-修改博客内容\"><a href=\"#3-修改博客内容\" class=\"headerlink\" title=\"3.修改博客内容\"></a>3.修改博客内容</h4><p>博客上显示的基本信息基本上都在_config.yml文件中设置，只需要在 _config.yml 文件中修改对应的信息，既可以在网站上呈现出不同的信息，对于具体的主题，每个主题的github仓库的README.md文件中都会给出比较详细的配置方式。</p>\n<p>最后，<strong>很关键的一步！！！</strong></p>\n<p>在_config.yml中的Deployment部分中，将远程仓库地址添加上去：</p>\n<p><img src=\"/img/blog/1693198897239.png\" alt=\"1693198897239\"></p>\n<h3 id=\"三、将本地项目部署到远程仓库\"><a href=\"#三、将本地项目部署到远程仓库\" class=\"headerlink\" title=\"三、将本地项目部署到远程仓库\"></a>三、将本地项目部署到远程仓库</h3><h4 id=\"1-安装部署工具\"><a href=\"#1-安装部署工具\" class=\"headerlink\" title=\"1. 安装部署工具\"></a>1. 安装部署工具</h4><p>继续在本地的项目根目录安装部署工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>只有以上命令执行成功才能将主页部署到github.io上去！</p>\n<h4 id=\"2-初始化本地仓库：\"><a href=\"#2-初始化本地仓库：\" class=\"headerlink\" title=\"2. 初始化本地仓库：\"></a>2. 初始化本地仓库：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-连接远程仓库\"><a href=\"#3-连接远程仓库\" class=\"headerlink\" title=\"3. 连接远程仓库\"></a>3. 连接远程仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:A-little-star/A-little-star.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-发布hexo到github-page\"><a href=\"#4-发布hexo到github-page\" class=\"headerlink\" title=\"4. 发布hexo到github page\"></a>4. 发布hexo到github page</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n<p>hexo clean将删除旧的静态文件及其他缓存文件；</p>\n<p>hexo g 命令实际上是hexo generate的简写，根据源文件生成静态HTML文件；</p>\n<p>hexo d 命令实际上是hexo deploy的简写，它将把生成的静态文件部署到github上去。</p>\n<p>执行完以上命令后，打开github，你会发现你的github.io仓库中多了一些文件，这就是hexo d命令部署上去的。</p>\n<h4 id=\"5-将本地源代码推送至远程\"><a href=\"#5-将本地源代码推送至远程\" class=\"headerlink\" title=\"5. 将本地源代码推送至远程\"></a>5. 将本地源代码推送至远程</h4><p>由于github.io仓库中已经存放了部署的静态网页，所以我们新建一个分支src，将源码放在这个分支下面，用于后续开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;First commit.&#x27;</span></span><br><span class=\"line\">git checkout -b src</span><br><span class=\"line\">git push -u origin src</span><br></pre></td></tr></table></figure>\n\n<p>接下来打开网站就可以看到效果了。</p>\n<h4 id=\"6-之后修改\"><a href=\"#6-之后修改\" class=\"headerlink\" title=\"6. 之后修改\"></a>6. 之后修改</h4><p>之后每次修改后，都可以用hexo clean &amp;&amp; hexo g来生成网页，在本地通过hexo s调试之后，hexo d部署到远程，然后将源码push到远程仓库即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般情况下，为自己搭建一个个人主页，需要服务器部署、域名解析、网页开发等工作，这些工作非常的繁琐且复杂，非常不适合小白或者没有太多时间的学生党。</p>\n<p>但是利用Hexo+GitHub，就可以轻松解决以上的问题。</p>\n<p>Hexo是一个基于Node.js的静态博客生成框架，它允许用户以简介的方式创建、管理和发布博客内容，Hexo的设计初衷是为了让用户能够更轻松地搭建个人博客，无需复杂的数据库或服务器设置，只需生成一组静态HTML文件，然后将其部署到一个静态文件托管服务上，如GitHub pages、Netlify等。</p>\n<p>而GitHub Pages能够为我们提供一个免费的静态文件托管平台，创建的github.io非常适合用于个人博客、项目文档、作品展示等内容。</p>\n<h2 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h2><h3 id=\"一、配置环境\"><a href=\"#一、配置环境\" class=\"headerlink\" title=\"一、配置环境\"></a>一、配置环境</h3><p>本文使用的操作系统为Win10下的Ubuntu22.04 WSL发行版，实际上是一个Linux系统，至于windows系统，操作方法类似。</p>\n<h4 id=\"1-安装Node-js。\"><a href=\"#1-安装Node-js。\" class=\"headerlink\" title=\"1. 安装Node.js。\"></a>1. 安装Node.js。</h4><p>这里建议大家不要使用Ubuntu自带的apt下载nodejs，因为版本不一定是最新的，建议直接去Nodejs官网去下载比较新的版本。一般情况下nodejs会附带配套的npm（Node Package Manager，是一个用于Node.js环境的包管理工具），如果没有的话可以单独安装一下npm。</p>\n<p>这里给大家推荐一个Ubuntu下的nodejs安装教程 <a href=\"https://blog.csdn.net/w20101310/article/details/73135388\">https://blog.csdn.net/w20101310/article/details/73135388</a></p>\n<p>windows系统下的小伙伴可以自行STFW（Search the f**king Web）。</p>\n<p><strong>本文使用的Node.js版本为v18.13.0，npm版本为8.19.3</strong></p>\n<h4 id=\"2-安装Git。\"><a href=\"#2-安装Git。\" class=\"headerlink\" title=\"2. 安装Git。\"></a>2. 安装Git。</h4><p>相信程序员伙伴们都认识这个工具，它实际上是一个非常强大的版本控制软件。</p>\n<p>对于还没有使用过git的小伙伴，在Ubuntu下直接apt安装即可（运行以下命令）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git</span><br></pre></td></tr></table></figure>\n\n<p>windows系统可以自行STFW，git的安装相对简单。</p>\n<h4 id=\"3-安装hexo。\"><a href=\"#3-安装hexo。\" class=\"headerlink\" title=\"3. 安装hexo。\"></a>3. 安装hexo。</h4><p>在命令行中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>等待自动安装完成后，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p>检查是否安装成功，若安装成功，应该显示hexo的版本号。</p>\n<p><strong>本文使用的hexo版本为hexo-cli: 4.3.1</strong></p>\n<h4 id=\"4-在github上创建github-io远程仓库。\"><a href=\"#4-在github上创建github-io远程仓库。\" class=\"headerlink\" title=\"4. 在github上创建github.io远程仓库。\"></a>4. 在github上创建github.io远程仓库。</h4><p>在github中新建一个仓库，Repository name设置为<username>.github.io，比如我的github用户名是A-little-star，那么创建的仓库名称应为A-little-star.github.io，注意这里必须使用自己的用户名，否则会出错。</p>\n<h3 id=\"二、创建Hexo项目，能够在本地运行\"><a href=\"#二、创建Hexo项目，能够在本地运行\" class=\"headerlink\" title=\"二、创建Hexo项目，能够在本地运行\"></a>二、创建Hexo项目，能够在本地运行</h3><h4 id=\"1-初始化Hexo\"><a href=\"#1-初始化Hexo\" class=\"headerlink\" title=\"1. 初始化Hexo\"></a>1. 初始化Hexo</h4><p>创建一个文件夹用于存放Hexo项目。比如创建一个名为mypage的目录。</p>\n<p>进入mypage目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会在mypage目录下创建一个新的目录blog，并在blog目录下对hexo项目进行初始化。</p>\n<p>接着进入blog目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>然后利用hexo工具生成网页：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>完成之后就已经成功在本地创建了一个网页，想查看的话，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server  <span class=\"comment\"># 可以简写为hexo s</span></span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在本地开启一个服务器，提示你可以通过给定的URL访问网页，如下图所示：</p>\n<p><img src=\"/img/blog/1693197974225\" alt=\"1693197974225\"></p>\n<p>默认的网址为<a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p>看到这样的画面，证明配置成功：</p>\n<p> <img src=\"/../img/blog/b26252eb40bc11f27ab2808484f82dd0.png\" alt=\"img\"> </p>\n<h4 id=\"2-安装主题\"><a href=\"#2-安装主题\" class=\"headerlink\" title=\"2. 安装主题\"></a>2. 安装主题</h4><p>Hexo的主题管理非常的方便易用，更换主题可以采用如下方式：</p>\n<p>在浏览器中搜索hexo theme，进入官网的主题页面，里面有300+种主题，你可以选择一种自己喜欢的主题。</p>\n<p>这里我使用的主题是Aircloud。</p>\n<p>然后进入到该主题的github仓库，将代码clone到hexo项目的themes目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud</span><br></pre></td></tr></table></figure>\n\n<p>完成之后，进入到themes文件夹，可以看到里面多了一个aircloud。</p>\n<p><img src=\"/../img/blog/1693198425618.png\" alt=\"1693198425618\"></p>\n<p>然后进入到项目根目录，修改其中的_config.yml文件，将以theme: 开头的行改为theme: aircloud</p>\n<p><img src=\"/../img/blog/1693198510376.png\" alt=\"1693198510376\"></p>\n<p>然后再运行hexo s进行本地测试。</p>\n<p>会发现主题发生了变化。</p>\n<h4 id=\"3-修改博客内容\"><a href=\"#3-修改博客内容\" class=\"headerlink\" title=\"3.修改博客内容\"></a>3.修改博客内容</h4><p>博客上显示的基本信息基本上都在_config.yml文件中设置，只需要在 _config.yml 文件中修改对应的信息，既可以在网站上呈现出不同的信息，对于具体的主题，每个主题的github仓库的README.md文件中都会给出比较详细的配置方式。</p>\n<p>最后，<strong>很关键的一步！！！</strong></p>\n<p>在_config.yml中的Deployment部分中，将远程仓库地址添加上去：</p>\n<p><img src=\"/img/blog/1693198897239.png\" alt=\"1693198897239\"></p>\n<h3 id=\"三、将本地项目部署到远程仓库\"><a href=\"#三、将本地项目部署到远程仓库\" class=\"headerlink\" title=\"三、将本地项目部署到远程仓库\"></a>三、将本地项目部署到远程仓库</h3><h4 id=\"1-安装部署工具\"><a href=\"#1-安装部署工具\" class=\"headerlink\" title=\"1. 安装部署工具\"></a>1. 安装部署工具</h4><p>继续在本地的项目根目录安装部署工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>只有以上命令执行成功才能将主页部署到github.io上去！</p>\n<h4 id=\"2-初始化本地仓库：\"><a href=\"#2-初始化本地仓库：\" class=\"headerlink\" title=\"2. 初始化本地仓库：\"></a>2. 初始化本地仓库：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-连接远程仓库\"><a href=\"#3-连接远程仓库\" class=\"headerlink\" title=\"3. 连接远程仓库\"></a>3. 连接远程仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:A-little-star/A-little-star.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-发布hexo到github-page\"><a href=\"#4-发布hexo到github-page\" class=\"headerlink\" title=\"4. 发布hexo到github page\"></a>4. 发布hexo到github page</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n<p>hexo clean将删除旧的静态文件及其他缓存文件；</p>\n<p>hexo g 命令实际上是hexo generate的简写，根据源文件生成静态HTML文件；</p>\n<p>hexo d 命令实际上是hexo deploy的简写，它将把生成的静态文件部署到github上去。</p>\n<p>执行完以上命令后，打开github，你会发现你的github.io仓库中多了一些文件，这就是hexo d命令部署上去的。</p>\n<h4 id=\"5-将本地源代码推送至远程\"><a href=\"#5-将本地源代码推送至远程\" class=\"headerlink\" title=\"5. 将本地源代码推送至远程\"></a>5. 将本地源代码推送至远程</h4><p>由于github.io仓库中已经存放了部署的静态网页，所以我们新建一个分支src，将源码放在这个分支下面，用于后续开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;First commit.&#x27;</span></span><br><span class=\"line\">git checkout -b src</span><br><span class=\"line\">git push -u origin src</span><br></pre></td></tr></table></figure>\n\n<p>接下来打开网站就可以看到效果了。</p>\n<h4 id=\"6-之后修改\"><a href=\"#6-之后修改\" class=\"headerlink\" title=\"6. 之后修改\"></a>6. 之后修改</h4><p>之后每次修改后，都可以用hexo clean &amp;&amp; hexo g来生成网页，在本地通过hexo s调试之后，hexo d部署到远程，然后将源码push到远程仓库即可。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cllug99bp0003tbtn2q6scon8","tag_id":"cllug99bt0004tbtn40uwfgoc","_id":"cllug99bu0005tbtndc2fd45b"}],"Tag":[{"name":"教程","_id":"cllug99bt0004tbtn40uwfgoc"}]}}